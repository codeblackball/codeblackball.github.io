<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/12/12/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <url>/2022/12/12/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h4 id="解决问题的思路"><a href="#解决问题的思路" class="headerlink" title="解决问题的思路"></a>解决问题的思路</h4><p>​使用Kruskal算法和并查集生成最小生成树</p><h4 id="老师抽查方式"><a href="#老师抽查方式" class="headerlink" title="老师抽查方式"></a>老师抽查方式</h4><p>​老师只会问你使用什么方法生成，问是Prim算法还是Kruskal算法，怎么实现的，用Kruskal的A+，Prim的A，<strong>根据别人反馈，不怎么看你的数据结构</strong></p><h4 id="Kruskal算法解释"><a href="#Kruskal算法解释" class="headerlink" title="Kruskal算法解释"></a>Kruskal算法解释</h4><p>​首先按照各边的权值大小进行升序排序，然后依次遍历，如果这条边的两个点的根节点不是同一个，即加入该条边后构成不了闭环，则将该边加入生成树，否则直接筛选下一条边</p><h4 id="并查集求并解释"><a href="#并查集求并解释" class="headerlink" title="并查集求并解释"></a>并查集求并解释</h4><p>​首先对parent数组进行初始化，先将各点视作各自的根，打个比方，有n个点就把他们视作n个树，它们是各自的根。求是否同根很简单，使用find函数，find函数会先将parent[i]与i进行比较，如果parent[i]&#x3D;&#x3D;i，那么i就是根本身，直接返回parent[i]，否则将find（parent[i]）的值赋给parent[i]，这样就会让从i这个点到它根节点的路径上的所有的点的根节点都设置为它们所在的这颗树的根节点，从而压缩了路径。</p><p>​对给定的两个点都这样进行操作后，对比它们得到的函数返回值，如果一样则说明它们在同一颗树里，那么连接之后会出现闭环，否则不在同一颗树里，根据要求可以加入生成树</p><h4 id="头文件及宏定义"><a href="#头文件及宏定义" class="headerlink" title="头文件及宏定义"></a>头文件及宏定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 8<span class="hljs-comment">//最大边数存储</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br></code></pre></td></tr></table></figure><h4 id="结构体与全局变量"><a href="#结构体与全局变量" class="headerlink" title="结构体与全局变量"></a>结构体与全局变量</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br><span class="hljs-type">int</span> from,to;<span class="hljs-comment">//from与to代表一条边</span><br><span class="hljs-type">int</span> value;<span class="hljs-comment">//value代表这条边的权值</span><br>&#125;data[MAXSIZE],result[MAXSIZE];<span class="hljs-comment">//data数组存放初始数据集,result数组存放生成树的各边</span><br><span class="hljs-type">int</span> parent[MAXSIZE];<span class="hljs-comment">//parent代表各点根节点位置</span><br><span class="hljs-type">int</span> require;<span class="hljs-comment">//存储总消耗</span><br></code></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Init</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">7</span>;i++)&#123;<span class="hljs-comment">//初始化parent数组</span><br>parent[i]=i;<br>&#125;<br>    <span class="hljs-comment">//懒得输入数据,直接赋,这里我设置了6个点,10条边</span><br>data[<span class="hljs-number">0</span>].from=<span class="hljs-number">1</span>,data[<span class="hljs-number">0</span>].to=<span class="hljs-number">2</span>,data[<span class="hljs-number">0</span>].value=<span class="hljs-number">1</span>;<br>data[<span class="hljs-number">1</span>].from=<span class="hljs-number">2</span>,data[<span class="hljs-number">1</span>].to=<span class="hljs-number">3</span>,data[<span class="hljs-number">1</span>].value=<span class="hljs-number">5</span>;<br>data[<span class="hljs-number">2</span>].from=<span class="hljs-number">4</span>,data[<span class="hljs-number">2</span>].to=<span class="hljs-number">5</span>,data[<span class="hljs-number">2</span>].value=<span class="hljs-number">1</span>;<br>data[<span class="hljs-number">3</span>].from=<span class="hljs-number">1</span>,data[<span class="hljs-number">3</span>].to=<span class="hljs-number">6</span>,data[<span class="hljs-number">3</span>].value=<span class="hljs-number">3</span>;<br>data[<span class="hljs-number">4</span>].from=<span class="hljs-number">2</span>,data[<span class="hljs-number">4</span>].to=<span class="hljs-number">6</span>,data[<span class="hljs-number">4</span>].value=<span class="hljs-number">2</span>;<br>data[<span class="hljs-number">5</span>].from=<span class="hljs-number">3</span>,data[<span class="hljs-number">5</span>].to=<span class="hljs-number">4</span>,data[<span class="hljs-number">5</span>].value=<span class="hljs-number">6</span>;<br>data[<span class="hljs-number">6</span>].from=<span class="hljs-number">1</span>,data[<span class="hljs-number">6</span>].to=<span class="hljs-number">5</span>,data[<span class="hljs-number">6</span>].value=<span class="hljs-number">4</span>;<br>data[<span class="hljs-number">7</span>].from=<span class="hljs-number">6</span>,data[<span class="hljs-number">7</span>].to=<span class="hljs-number">5</span>,data[<span class="hljs-number">7</span>].value=<span class="hljs-number">7</span>;<br>data[<span class="hljs-number">8</span>].from=<span class="hljs-number">4</span>,data[<span class="hljs-number">8</span>].to=<span class="hljs-number">6</span>,data[<span class="hljs-number">8</span>].value=<span class="hljs-number">4</span>;<br>data[<span class="hljs-number">9</span>].from=<span class="hljs-number">3</span>,data[<span class="hljs-number">9</span>].to=<span class="hljs-number">6</span>,data[<span class="hljs-number">9</span>].value=<span class="hljs-number">5</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="查找根节点函数"><a href="#查找根节点函数" class="headerlink" title="查找根节点函数"></a>查找根节点函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_root</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br><span class="hljs-keyword">if</span>(parent[x]!=x)<br>parent[x]=<span class="hljs-built_in">find_root</span>(parent[x]);<br><span class="hljs-keyword">return</span> parent[x];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node x,node y)</span></span>&#123;<br><span class="hljs-keyword">return</span> (x.value&lt;y.value);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Kruskal</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">sort</span>(data,data+<span class="hljs-number">10</span>,cmp);<span class="hljs-comment">//根据权值value升序排序</span><br><span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<span class="hljs-comment">//记录结果数组下标</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;MAXSIZE;i++)&#123;<br><span class="hljs-type">int</span> x=<span class="hljs-built_in">find_root</span>(data[i].from),y=<span class="hljs-built_in">find_root</span>(data[i].to);<br><span class="hljs-keyword">if</span>(x!=y)&#123;<span class="hljs-comment">//x不等于y说明这条边的两个端点不在同一个根，连接后不会形成环路</span><br>parent[x]=y;<span class="hljs-comment">//更新根节点</span><br>result[++count].from=data[i].from;<br>result[count].to=data[i].to;<br>result[count].value=data[i].value;<br>require+=data[i].value;<span class="hljs-comment">//记录总消耗</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="打印函数"><a href="#打印函数" class="headerlink" title="打印函数"></a>打印函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">display</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;原各边及费用：\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;MAXSIZE;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>,data[i].from,data[i].to,data[i].value);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n最小生成树的路径及费用：\n&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">6</span>;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %d\n&quot;</span>,result[i].from,result[i].to,result[i].value);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n总费用为：%d&quot;</span>,require);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">Init</span>();<br><span class="hljs-built_in">Kruskal</span>();<br><span class="hljs-built_in">display</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/12/12/%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/12/12/%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h1><h2 id="VSCode的学习网址"><a href="#VSCode的学习网址" class="headerlink" title="VSCode的学习网址"></a>VSCode的学习网址</h2><p>官方：<a href="https://code.visualstudio.com/docs/setup/mac">https://code.visualstudio.com/docs/setup/mac</a></p><p>个人推荐的使用教程：<a href="https://geek-docs.com/vscode/vscode-tutorials/what-is-vscode.html">https://geek-docs.com/vscode/vscode-tutorials/what-is-vscode.html</a></p><p>如何简单的找到官方教程？</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670372901919-ba71fd43-a07b-424f-8f2b-a298b7945d8e.jpeg" alt="img"></p><h2 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h2><h3 id="更改颜色主题"><a href="#更改颜色主题" class="headerlink" title="更改颜色主题"></a>更改颜色主题</h3><p>点击左下角管理，点击颜色主题</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670373313135-329b0961-cb39-4690-a25f-6529b2ed527a.jpeg" alt="img"></p><p>根据自己的需求进行修改</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670373356755-4c6c9c53-a06d-42a2-a51c-d41d5c22d0ca.jpeg" alt="img"></p><h3 id="更改字体设置"><a href="#更改字体设置" class="headerlink" title="更改字体设置"></a>更改字体设置</h3><p>点击管理中的设置选项</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670373510636-f8b4f069-0bdd-4b3c-bc89-cd575e5327bd.jpeg" alt="img"></p><p>“Font Size”控制字体大小，“Font Family”控制字体系列，这里根据个人喜好设置</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670373603298-6522e445-4b27-4924-bc3e-d8814d8f8971.jpeg" alt="img"></p><h3 id="自动保存"><a href="#自动保存" class="headerlink" title="自动保存"></a>自动保存</h3><p>点击管理中的设置</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670374233354-60973013-13bb-4ffd-8c60-614a34bec9a1.jpeg" alt="img"></p><p>搜索自动保存</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670374922233-bfac9b21-0e39-40f4-a478-f06a1e9640d2.jpeg" alt="img"></p><p>将设置里的“Auto Save”配置修改为“afterDelay，并设置时间，这里我设置的是1000毫秒</p><h2 id="工作台介绍"><a href="#工作台介绍" class="headerlink" title="工作台介绍"></a>工作台介绍</h2><h3 id="面板栏"><a href="#面板栏" class="headerlink" title="面板栏"></a>面板栏</h3><p>命令面板是VSCode 快捷键的主要交互界面，你可以通过 F1 或者“Ctrl+Shift+P”打开。你可以在命令面板中快速搜索命令并且执行。如果你的 VSCode 是简体中文版，那么你可以在命令面板里使用中文或者英文来搜索命令。VSCode 的绝大多数命令都可以在命令面板里搜到，所以熟练使用命令面板，你就可以摆脱鼠标，完全通过键盘操作来完成全部编码工作。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670372672461-464a8ba6-3664-478c-84be-33f53d7c5a21.jpeg" alt="img"></p><h3 id="活动栏"><a href="#活动栏" class="headerlink" title="活动栏"></a>活动栏</h3><p>最左侧的一列，包括资源管理器、查找、源代码管理、debug调式（一般用于后端的调理）、插件安装</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670375869353-1877140d-66d7-4996-9d48-c00ffb08415f.jpeg" alt="img"></p><h3 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h3><p>显示代码状态和调试状态；是否处于调试状态，代码是否在编辑状态等</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670376241889-39c1a147-31b9-4dbe-9524-edcf0203609c.jpeg" alt="img"></p><h3 id="编辑栏"><a href="#编辑栏" class="headerlink" title="编辑栏"></a>编辑栏</h3><p>编写代码的区域</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670376470248-32f01834-02c6-490d-936a-899be71e8327.jpeg" alt="img"></p><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><p>新建项目文件和文件夹，一般用于整体浏览项目布局</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670376625676-50b54253-3981-4704-a05e-ba14cbed3d14.jpeg" alt="img"></p><h2 id="打开项目文件"><a href="#打开项目文件" class="headerlink" title="打开项目文件"></a>打开项目文件</h2><p>点击左上角文件，打开文件夹</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670376842417-d2cc5043-0520-405d-a551-448758d28a07.jpeg" alt="img"></p><p>选择你需要打开的项目文件即可</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670376896102-819e9db3-78c7-4b61-b577-a2852d63b685.jpeg" alt="img"></p><p>当然你也可以选择新建文件或者文件夹</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670376951004-f82d4459-c863-48ae-b4cf-74b4e515c701.jpeg" alt="img"></p><p>之后你就可以对项目文件进行编辑了~</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ol><li><ol><li>alt+shift+F 代码格式化</li><li>alt+↑ 向上移动一行代码</li><li>alt+↓ 向下移动一行代码</li><li>alt+shift+↑ 向上复制一行</li><li>alt+shift+↓ 向下复制一行</li><li>Ctrl+F 查询</li><li>Ctrl+H 查找并替换</li><li>ctrl+&#x2F; 单行注释</li><li>shift+Alt+A 多行注释</li><li>ctrl+shift+K (ctrl+x) 快速删除一行</li></ol></li></ol><h3 id="快速编写代码小技巧"><a href="#快速编写代码小技巧" class="headerlink" title="快速编写代码小技巧"></a>快速编写代码小技巧</h3><p>以HTML为例：</p><ol><li><ol><li>! 回车，快速生成HTML基本骨架</li><li>div*2 回车 生成两个并列的div</li><li>div.c1 回车 </li><li>div#d1 回车 </li><li>div{$}*数字 多个平级标签的排序</li><li>&gt;表示包含关系 ul &gt;li*4 快速生成包含4个li的列表</li></ol></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/12/12/%E5%88%A9%E7%94%A8GitHub%E5%AE%9E%E7%8E%B0%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/"/>
    <url>/2022/12/12/%E5%88%A9%E7%94%A8GitHub%E5%AE%9E%E7%8E%B0%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="利用GitHub实现源代码管理"><a href="#利用GitHub实现源代码管理" class="headerlink" title="利用GitHub实现源代码管理"></a>利用GitHub实现源代码管理</h1><p>VSCode的侧边栏提供了源代码管理这个选项，使用它能很好的帮助我们使用git进行管理，这里介绍下VSCode运用GitHub实现源代码管理</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670491788205-be134ab9-8958-4537-9859-0c2a0e3eb274.jpeg" alt="img"></p><h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p>安装git并添加到环境变量，安装VSCode</p><p>Git详细安装过程：<a href="https://blog.csdn.net/qq_43715354/article/details/108638061">https://blog.csdn.net/qq_43715354&#x2F;article&#x2F;details&#x2F;108638061%20</a></p><p>VSCode安装过程：<a href="https://blog.csdn.net/m0_48565215/article/details/125138368%EF%BC%88%E4%B9%9F%E5%8F%AF%E5%8F%82%E7%85%A7%E5%89%8D%E6%96%87%EF%BC%89">https://blog.csdn.net/m0_48565215/article/details/125138368（也可参照前文）</a></p><h2 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>进入github官网，注册，登录，在右上角添加一个repository</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670491806221-7e62918b-c4aa-44f7-a2a7-a238817f7f90.jpeg" alt="img"></p><p>下面是一个 repository 最基本的信息，我们需要清楚了解每一个都是什么意思。配置完每个参数之后，我们就可以创建仓库。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1670491986021-87def808-c776-47b2-9dc9-d2696d3450d4.png" alt="img"></p><p>生成仓库的基本结构</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670492032817-d85827bb-1642-4270-ac9d-1877c5ed179d.jpeg" alt="img"></p><p>在本地创建一个文件夹，用来接受test这个仓库内部的文件，也就是clone操作</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670492125353-fc8f9b18-d4f8-487e-a0b0-1e66fda06dbf.jpeg" alt="img"></p><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p>安装完git之后重启VSCode，源代码管理栏就会变成如下情况</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670492248998-f99d0417-e0d3-43ca-a1d5-154e3741d6c4.jpeg" alt="img"></p><p>配置账号和密码，全局</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">git config --global user.email &quot;you@example.com&quot;<br>git config --global user.name &quot;Your Name&quot;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670492363263-127b5a28-6a2b-49a0-8eaa-4af821e4bbad.jpeg" alt="img"></p><h3 id="VSCode绑定GitHub"><a href="#VSCode绑定GitHub" class="headerlink" title="VSCode绑定GitHub"></a>VSCode绑定GitHub</h3><p>点击“发布到GitHub”，然后会跳转到网页处，输入账号密码登录GitHub</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670492578759-943f623e-57c3-4594-b7e8-264afe08d283.jpeg" alt="img"></p><p>点击 Continue ，这样我们的VSCode就会和GitHub关联起来了，然后点击打开</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670492672337-a4da73ea-f3dc-45f9-a974-a5d320dab88c.jpeg" alt="img"></p><p>这时候会跳回 VSCode，询问是否关联起来，点击 Open</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670492701099-4ea64275-cc97-4f04-a5d2-8d349eac997f.jpeg" alt="img"></p><p>关联成功之后就可以看到账户里连接到了GitHub</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670492782003-43b1c8d9-8a1b-462e-9848-f48e6163cb30.jpeg" alt="img"></p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>clone意思就是把GitHub上的仓库文件，克隆到本地，方便我们进行代码的修改或迭代</p><p>点击“初始化仓库”，这时候就会切换界面到达监视区</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670493159430-4118e954-afb4-4535-bcc9-fe66ca84825e.jpeg" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670493201364-1abcd655-a5b1-46a9-8e55-4e1100317350.jpeg" alt="img"></p><p>最上栏有四个选项，分别为查看形式、提交、刷新、视图和更多操作</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670493362259-7ce7ab49-3304-4175-8c6d-157779b8f872.jpeg" alt="img"></p><p>查看形式：可以选择文件排列形式</p><p>提交：用来提交版本信息到达本地仓库</p><p>刷新：刷新当前文件修改的内容</p><p>视图和更多操作的界面如下</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670493463163-afb285c7-93f6-4b27-ae4c-174d1327199c.jpeg" alt="img"></p><p>拉取：从仓库获得文件</p><p>推送：文件上传至仓库</p><p>克隆：仓库整体克隆到本地中</p><p>整个界面最下方一栏的相关内容解释</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670493598602-358c6ef1-5c21-43fd-ba2c-4a2f09708398.jpeg" alt="img"></p><p>分枝结构：名为master的分枝结构</p><p>云端信息：上传与下载的次数</p><p>问题：警告与报错</p><h3 id="代码上传"><a href="#代码上传" class="headerlink" title="代码上传"></a>代码上传</h3><h4 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h4><p>整体仓库克隆到本地当中</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670496895480-3a9c63fb-d5e9-4838-bf22-0ef764cb8308.jpeg" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670496927540-bd7a70dd-ee6c-40c2-9e2f-318dc8cddcde.jpeg" alt="img"></p><p>权限问题，点击允许，将会跳到一个GitHub授权画面，同理VSCode默认也要授权</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1670497010244-a322f98c-2c94-47dc-a01e-ebf8620dad70.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670497043258-4d304038-0c0e-4e33-b906-71d9fa4e5689.jpeg" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670497068435-d0b87d48-8361-4409-b3be-6be550f33a4e.jpeg" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1670497078158-ab9e09a9-bbef-430f-b9b8-7408a1799a75.png" alt="img"></p><p>由于我建立的仓库是私有的，所以最好手动输全，由GitHub 用户名&#x2F;工程名</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670497163127-04eea8dd-ef93-4bcd-a637-b37ebffd1dda.jpeg" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670497193066-fc14ed9f-9e9c-4092-a4a8-e14b5b05870c.jpeg" alt="img"></p><p>询问是否打开仓库，点击 Open，将会重启 VSCode进入克隆好的仓库内部</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670497236343-ea556763-f585-47fe-8727-a076e9fa881d.jpeg" alt="img"></p><h4 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h4><p>clone 成功之后，我们就可以在上面进行代码的修改等操作了，操作完之后，想要再保存版本，我们就需要分为两步，第一步，把代码信息上传到本地库当中，有两个隐藏文件是会保存版本信息的。第二步，保存的是本地的信息，我们还需要把本地库上传到 GitHub上面</p><p>新建两个文件，里面无内容，然后 commit</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670497338039-e174b40e-b68e-454d-8bef-5c0fe379b16b.jpeg" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670497370868-47a0f3d0-9997-4c55-966e-764a8d8ac65c.jpeg" alt="img"></p><p>增加版本信息，写越全越好，方便后期主机回头查看，之前显示已修改的文件此时同步到本地仓库了</p><h4 id="push"><a href="#push" class="headerlink" title="push"></a>push</h4><p>接下来准备把本地仓库内容，Push 到GitHub上面，最终我们可以在 GitHub 网站看到自己的库，如果你只是做个人的开发，可以选择不 Push，直接在把库保存在本地</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670497516023-94f6939b-504d-483f-a135-f39c0d129721.jpeg" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1670497523755-e3ea579c-9fca-475d-87e1-c8ac3816ed49.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670497560512-bf84f074-fa3d-4d14-a8b0-a40165964f2d.jpeg" alt="img"></p><h3 id="回滚版本"><a href="#回滚版本" class="headerlink" title="回滚版本"></a>回滚版本</h3><p>之前我们就有记录了版本信息，默认也会给我们添加一个版本号，那如何查找我们版本号呢？通过 Git 终端，输入指令查找提交记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git reflog<br></code></pre></td></tr></table></figure><p>黄色的字，就是当时提交的版本号</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670497639956-b806ed0b-7983-47a1-aeee-d521ab130fbb.jpeg" alt="img"></p><p>然后我们在输入对应想恢复的版本号，代码就能够回去了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">git reset --hard 版本号<br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1670497693968-741646d4-1f54-49c9-a9c6-79650e079acd.png" alt="img"></p><h2 id="关闭源代码管理"><a href="#关闭源代码管理" class="headerlink" title="关闭源代码管理"></a>关闭源代码管理</h2><p>因为下载的项目很多，导致源代码要管理5000个文件，一旦改动一个文件，就导致vscode假死，卡住不动，这里介绍一个简单的方法</p><p>打开使用了源代码管理的文件夹，删除.git文件，重启VSCode</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670497848717-4c45c050-f8ce-4b24-b85a-062df43e53b4.jpeg" alt="img"></p><p>此时源代码管理栏就会变成如下样式</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670491788205-be134ab9-8958-4537-9859-0c2a0e3eb274.jpeg?x-oss-process=image/resize,w_533,limit_0/interlace,1" alt="img"></p><p>你可以在设置中关闭自动搜索</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670497961707-e52ac545-10af-48ef-8304-b391cff0be18.jpeg" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/12/12/%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <url>/2022/12/12/%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<h1 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于VS Code，随着软件的更新，越来越多原本需要扩展才能实现的功能，现如今都被添加进软件，所以使用插件前务必更新至最新版本。可点击“帮助”-“检查更新”获取最新版本，或在官网<a href="https://code.visualstudio.com/%E8%8E%B7%E5%8F%96%E6%9C%80%E6%96%B0%E5%AE%89%E8%A3%85%E5%8C%85%E3%80%82">https://code.visualstudio.com/获取最新安装包。</a></p><h2 id="前端插件推荐"><a href="#前端插件推荐" class="headerlink" title="前端插件推荐"></a>前端插件推荐</h2><h3 id="Auto-Rename-Tag"><a href="#Auto-Rename-Tag" class="headerlink" title="Auto Rename Tag"></a>Auto Rename Tag</h3><p>该扩展修改HTML标签时，自动修改匹配的标签。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/gif/32629723/1670483754700-b4b6fd39-a7f3-4961-9e91-cf0eea5c6c4d.gif" alt="img"></p><h3 id="open-in-browser"><a href="#open-in-browser" class="headerlink" title="open in browser"></a>open in browser</h3><p>在浏览器里预览网页必备。运行html文件</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670483875904-0d21abdc-475e-4fd1-ba28-a6b0ca236a48.jpeg" alt="img"></p><h3 id="CSS-Peek"><a href="#CSS-Peek" class="headerlink" title="CSS Peek"></a><strong>CSS Peek</strong></h3><p>定位 CSS 类名</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670484225621-2d12a709-81c9-49fc-a2f0-f13c2b6837a5.jpeg" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/gif/32629723/1670484131660-99cdf273-dc2a-4f78-973a-f4a93bd4b603.gif" alt="img"></p><h3 id="Live-Server"><a href="#Live-Server" class="headerlink" title="Live Server"></a>Live Server</h3><p>启动具有静态和动态页面的实时重新加载功能的开发本地服务器。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670484475986-0fb3060e-29f9-422a-b95f-beb996939507.jpeg" alt="img"></p><p>扩展安装完成后打开一个html文档，右键即可找到”Open with Live Server”，或在状态栏右下角点击”Go Live”启动。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670484502910-1e3314ee-965b-40dc-a842-aa092cf3c8f4.jpeg" alt="img"></p><p>将VS Code与浏览器像这样并排，便可实时显示html内容。当VS Code保存 ( Ctrl+s ) 一次右侧页面便会更新。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670484538593-eee115c4-7cc1-4dfa-b589-9b2ee9b45a40.jpeg" alt="img"></p><h3 id="Code-Running"><a href="#Code-Running" class="headerlink" title="Code Running"></a>Code Running</h3><p>有时，你不需要运行你的整个项目，只需要其中的一小段。这就是Code Runner的用武之地。这个VS Code插件支持多种语言，可以通过预定义的键盘快捷键或在鼠标的帮助下运行高亮代码。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670484671687-4380ed84-4628-4e19-b28d-4c3a2ca79ef7.jpeg" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/gif/32629723/1670484678681-3b269f67-11e0-445d-b5c0-17953d3b551a.gif" alt="img"></p><h3 id="Bracket-Pair-Colorization-Toggler"><a href="#Bracket-Pair-Colorization-Toggler" class="headerlink" title="Bracket Pair Colorization Toggler"></a><strong>Bracket Pair Colorization Toggler</strong></h3><p>当你处理嵌套和逻辑条件时，情况会变得更糟。大括号对着色器通过给每个大括号对附加不同的颜色，解决了代码中大括号对猎取的问题。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670484791705-d6e391ae-efca-499e-8c91-724edf51ae67.jpeg" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/webp/32629723/1670484854093-46ae841d-4886-4e5d-a337-68f711ef9fb1.webp" alt="img"></p><p>这意味着，如果你有多个大括号，为了我们的方便和代码效率，它很容易被配上颜色</p><h3 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier-Code formatter"></a>Prettier-Code formatter</h3><p>Prettier 是最受欢迎的格式化和 linting 工具，可根据行业惯例标准化您的代码。它还确保您的团队在外观上创建视觉上无缝的代码 - 因此无需再争论您应该使用多少个制表符或空格或括号应该放在哪里。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670485066356-8236935e-930a-45a3-8b13-668a5b478720.jpeg" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/webp/32629723/1670485074578-61c00fbf-f653-4bb5-a018-cec615969476.webp" alt="img"></p><p>可以配置.prettierc.js文件,配合eslint、git hooks 一起使用，提升项目代码的规范性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs plain">module.exports = &#123;<br>    // 一行最多 100 字符<br>    printWidth: 100,<br>    // 不使用缩进符，而使用空格<br>    useTabs: false,<br>    // 使用 4 个空格缩进<br>    tabWidth: 4,<br>    tabSize: 4,<br>    // 行尾需要有分号<br>    semi: true,<br>    // 使用单引号<br>    singleQuote: true,<br>    // 对象的 key 仅在必要时用引号<br>    quoteProps: &#x27;as-needed&#x27;,<br>    // jsx 不使用单引号，而使用双引号<br>    jsxSingleQuote: false,<br>    // 末尾不需要逗号 &#x27;es5&#x27;  none<br>    trailingComma: &#x27;es5&#x27;,<br>    // 大括号内的首尾需要空格<br>    bracketSpacing: true,<br>    // jsx 标签的反尖括号需要换行<br>    jsxBracketSameLine: false,<br>    // 箭头函数，只有一个参数的时候，也需要括号<br>    arrowParens: &#x27;always&#x27;,<br>    // 每个文件格式化的范围是文件的全部内容<br>    rangeStart: 0,<br>    rangeEnd: Infinity,<br>    // 不需要写文件开头的 @prettier<br>    requirePragma: false,<br>    // 不需要自动在文件开头插入 @prettier<br>    insertPragma: false,<br>    // 使用默认的折行标准<br>    proseWrap: &#x27;preserve&#x27;,<br>    // 根据显示样式决定 html 要不要折行<br>    htmlWhitespaceSensitivity: &#x27;css&#x27;,<br>    // 换行符使用 lf 结尾是 \n \r \n\r auto<br>    endOfLine: &#x27;lf&#x27;,<br>&#125;; <br></code></pre></td></tr></table></figure><h3 id="Better-Comments"><a href="#Better-Comments" class="headerlink" title="Better Comments"></a>Better Comments</h3><p>Better Comments 允许您根据不同类型的注释突出显示您的注释，从而将其提升到一个新的水平,支持的类型是警报、查询、TODO 和突出显示。它也可以通过您可能需要的其他内容的注释样式进行扩展</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670485371053-01847d77-1249-47f7-95c7-1c75ac361f07.jpeg" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/webp/32629723/1670485382446-20c8f2b6-04ae-4203-9c7a-78985de36d80.webp" alt="img"></p><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><p>ESLint是一个JavaScript代码inter，可以发现并修复你的JavaScript代码中的问题。它可以很好地检测出你的代码中可能存在的问题模式，并帮助你修复它们，以避免不一致和避免bug。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670485485649-1f5993ce-9f2f-42a4-b966-106eb3ccf113.jpeg" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/webp/32629723/1670485499785-99aa68f1-f052-4bcb-a029-f30251e8117e.webp" alt="img"></p><h3 id="HTML-CSS-Support"><a href="#HTML-CSS-Support" class="headerlink" title="HTML CSS Support"></a>HTML CSS Support</h3><p>HTML CSS Support 是在VS Code中对HTML和CSS的终极智能感应。其功能包括id和class属性的完成，链接和嵌入样式表，继承和CSS选择器的验证。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670485698731-d48f1015-dc8d-4afb-9461-da16955a0fea.jpeg" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/webp/32629723/1670485714468-d0ee7a54-afe4-4785-9e46-a928693a3d72.webp" alt="img"></p><h3 id="Image-preview"><a href="#Image-preview" class="headerlink" title="Image preview"></a>Image preview</h3><p>预览图片,图片是否正确引入的显示工具，在图片连接上按住ctrl，鼠标悬浮即可看见是否正确找到路径下的图片文件</p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670485810559-8688be80-cde6-4796-aaf3-9ef0c8ff2296.jpeg" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670485839125-f931c167-8ee1-4da0-8b3d-8617a8af8d2d.jpeg" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/12/12/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2022/12/12/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h1><h2 id="下载VSCode安装文件"><a href="#下载VSCode安装文件" class="headerlink" title="下载VSCode安装文件"></a>下载VSCode安装文件</h2><p>官方网址：<a href="https://code.visualstudio.com/download#">https://code.visualstudio.com/download#</a></p><h2 id="根据自己的操作系统来选择对应的VSCode版本。"><a href="#根据自己的操作系统来选择对应的VSCode版本。" class="headerlink" title="根据自己的操作系统来选择对应的VSCode版本。"></a>根据自己的操作系统来选择对应的VSCode版本。</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1667913463756-5de81923-3fdf-4ba6-acc5-f2217eecf7d4.png" alt="img"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="1-在文件夹中打开刚下好的安装包，这里我使用的是64位的操作系统，注意对应自己电脑操作系统下载"><a href="#1-在文件夹中打开刚下好的安装包，这里我使用的是64位的操作系统，注意对应自己电脑操作系统下载" class="headerlink" title="1.在文件夹中打开刚下好的安装包，这里我使用的是64位的操作系统，注意对应自己电脑操作系统下载"></a>1.在文件夹中打开刚下好的安装包，这里我使用的是64位的操作系统，注意对应自己电脑操作系统下载</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1667913860635-16e4f9f1-50b5-4e00-8eda-a2617d1e1d0d.png" alt="img"></p><h4 id="2-勾选“我同意此协议”，点击“下一步”"><a href="#2-勾选“我同意此协议”，点击“下一步”" class="headerlink" title="2.勾选“我同意此协议”，点击“下一步”"></a>2.勾选“我同意此协议”，点击“下一步”</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1667913949758-fda15c5d-6d75-4440-9dce-670bd79cee15.png" alt="img"></p><h4 id="3-选择安装位置，可根据自己习惯更改，由于我已经装了VSCode，安装包自动跳过这一过程，个人建议放在C盘之外，点击“下一步”"><a href="#3-选择安装位置，可根据自己习惯更改，由于我已经装了VSCode，安装包自动跳过这一过程，个人建议放在C盘之外，点击“下一步”" class="headerlink" title="3.选择安装位置，可根据自己习惯更改，由于我已经装了VSCode，安装包自动跳过这一过程，个人建议放在C盘之外，点击“下一步”"></a>3.选择安装位置，可根据自己习惯更改，由于我已经装了VSCode，安装包自动跳过这一过程，个人建议放在C盘之外，点击“下一步”</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1667914469163-76778532-dac7-458b-98c7-c206db37f8ba.png" alt="img"></p><h4 id="4-这里可以根据自己需求勾选，值得注意的是，如果你勾选了“添加到PATH（重启后生效）”，那么重启之后系统会帮你自动配置好环境变量，当然你也可以选择自己配置"><a href="#4-这里可以根据自己需求勾选，值得注意的是，如果你勾选了“添加到PATH（重启后生效）”，那么重启之后系统会帮你自动配置好环境变量，当然你也可以选择自己配置" class="headerlink" title="4.这里可以根据自己需求勾选，值得注意的是，如果你勾选了“添加到PATH（重启后生效）”，那么重启之后系统会帮你自动配置好环境变量，当然你也可以选择自己配置"></a>4.这里可以根据自己需求勾选，值得注意的是，如果你勾选了“添加到PATH（重启后生效）”，那么重启之后系统会帮你自动配置好环境变量，当然你也可以选择自己配置</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1667915318372-78287b3e-0ee7-43fd-843d-456eb22464ce.png" alt="img"></p><h4 id="5-点击“安装”，等待安装进度条拉满，点击“完成”"><a href="#5-点击“安装”，等待安装进度条拉满，点击“完成”" class="headerlink" title="5.点击“安装”，等待安装进度条拉满，点击“完成”"></a>5.点击“安装”，等待安装进度条拉满，点击“完成”</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1667914604608-d0358a4f-311f-4fc0-8767-8e62e1abab2b.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1667914740897-fc5b2331-172e-46e9-ab0a-66c73e938145.png" alt="img"></p><h4 id="6-打开vscode搜Chinese中文包进行安装，之后重启vscode（可根据个人选择是否使用中文）"><a href="#6-打开vscode搜Chinese中文包进行安装，之后重启vscode（可根据个人选择是否使用中文）" class="headerlink" title="6.打开vscode搜Chinese中文包进行安装，之后重启vscode（可根据个人选择是否使用中文）"></a>6.打开vscode搜Chinese中文包进行安装，之后重启vscode（可根据个人选择是否使用中文）</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1667915466030-2ffe43d9-6b81-4054-b4a9-28bcb8111134.png" alt="img"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1667915427084-02b6b118-08cd-4a62-919e-c5f0dc2b56ff.png" alt="img"></p><h4 id="7-恭喜你成功安装VSCode！"><a href="#7-恭喜你成功安装VSCode！" class="headerlink" title="7.恭喜你成功安装VSCode！"></a>7.恭喜你成功安装VSCode！</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1667915577463-23424b16-9fe2-4dc6-9a41-25f5df93da57.png" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/12/12/VSCode%E4%B8%8B%E7%9A%84editorconfig%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/12/12/VSCode%E4%B8%8B%E7%9A%84editorconfig%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="VSCode下的editorconfig使用"><a href="#VSCode下的editorconfig使用" class="headerlink" title="VSCode下的editorconfig使用"></a>VSCode下的editorconfig使用</h1><h2 id="Vscode如何使用editorconfig"><a href="#Vscode如何使用editorconfig" class="headerlink" title="Vscode如何使用editorconfig"></a><strong>Vscode如何使用editorconfig</strong></h2><p>EditorConfig插件不是所有编辑器都默认支持，如Vscode需要自行下载，而webstrom默认支持，我们可以在扩展中下载EditorConfig for VS Code。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1665930184934-f5565756-7b8b-475e-907d-00041d700aea.png" alt="img"></p><p>在当前项目的根目录下添加.editorconfig文件，如下。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1665930996115-e17e2af2-2a10-4877-b0eb-f848efd0a2ed.png" alt="img"></p><p>可以根据个人需求编辑风格的具体界面。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1665931355816-a833159c-5270-45ec-ae0d-f7595a09024c.png" alt="img"></p><h2 id="editorconfig相关编码属性："><a href="#editorconfig相关编码属性：" class="headerlink" title="editorconfig相关编码属性："></a><strong>editorconfig相关编码属性：</strong></h2><ul><li>root：表示是最顶层的配置文件，发现为true时，才会停止查找.editorconfig文件</li><li>indent_style：设置缩进风格，可选值有制表符tab和空格space</li><li>indent_size：设置缩进空格数，一般为整数2或4</li><li>tab_width：设置tab类型的缩进列数，一般为整数2或4</li><li>charset：编码格式，可选值有latin1、utf-8（一般使用它）、utf-16be、utf-16le</li><li>insert_final_newline：保存文件时是否在文件的最后插入一个空行。可为true和false</li><li>trim_trailing_whitespace：是否删除行尾的空格，可为true和false</li><li>end_of_line设置换行符格式，可选值lf(一般为它)、cr、crlf</li></ul><h2 id="与editorconfig相似的代码整洁工具："><a href="#与editorconfig相似的代码整洁工具：" class="headerlink" title="与editorconfig相似的代码整洁工具："></a><strong>与editorconfig相似的代码整洁工具：</strong></h2><ul><li>ESLint：<a href="https://juejin.cn/post/7012798266089668645">https://juejin.cn/post/7012798266089668645</a></li><li>Prettier：<a href="https://www.jianshu.com/p/18999f6e1668">https://www.jianshu.com/p/18999f6e1668</a></li></ul><p>全面梳理三者：<a href="https://juejin.cn/post/6952842182252298248">https://juejin.cn/post/6952842182252298248</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/12/12/Snippets/"/>
    <url>/2022/12/12/Snippets/</url>
    
    <content type="html"><![CDATA[<h1 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h1><h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a><strong>简单介绍</strong></h2><p>snippets（代码块），在我们日常工作中存在大量重复代码编写，这时可以使用snippets直接调用已经封装好的模板代码，这样做能极大提高编程效率。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/gif/32629723/1665928191986-7b732333-a1e3-47ad-ae2b-8c0dcf494ff0.gif" alt="img"></p><p>另外，关于Vscode snippets的相关使用：<a href="https://www.jianshu.com/p/a60b320fb197">https://www.jianshu.com/p/a60b320fb197</a><br>      <a href="https://www.php.cn/tool/vscode/489259.html">https://www.php.cn/tool/vscode/489259.html</a></p><h2 id="snippets插件"><a href="#snippets插件" class="headerlink" title="snippets插件"></a><strong>snippets插件</strong></h2><p>●JavaScript(ES6) code snippets：ES6语法智能提示，以及快速输入，不仅仅支持.js，还支持.ts，.jsx，.tsx，.html，.vue，省去了配置其支持各种包含js代码文件的时间。<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670487361756-62bf2b59-cbbc-45f5-a2c4-791e304ffef1.jpeg?x-oss-process=image/resize,w_1312,limit_0/interlace,1" alt="img"><br>●Vue 3 Snippets：包含了所有的Vue.js 2和Vue.js 3的api对应的代码片段<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670487408465-2460aa06-0cc5-433c-bf89-98d78f78b5f9.jpeg?x-oss-process=image/resize,w_1312,limit_0/interlace,1" alt="img"><br>●Vue Vscode Snippets：<a href="https://www.its301.com/article/qq_41107231/117195087">https://www.its301.com/article/qq_41107231/117195087</a><br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670487430903-4fe84e46-341f-4328-96da-32627d7780d7.jpeg?x-oss-process=image/resize,w_1312,limit_0/interlace,1" alt="img"><br>●Simple React Snippets：<a href="https://www.jianshu.com/p/c141b89e5808">https://www.jianshu.com/p/c141b89e5808</a><br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/32629723/1670487456569-650b980e-972e-4034-bc5a-8f022388f4b7.jpeg?x-oss-process=image/resize,w_1312,limit_0/interlace,1" alt="img"></p><h2 id="创建你自己的Snippets"><a href="#创建你自己的Snippets" class="headerlink" title="创建你自己的Snippets"></a>创建你自己的Snippets</h2><p>在 VSCode 中创建 snippets 是非常简单的事情（无需安装任何扩展），有两种方法实现：</p><ul><li>在 macOS 中选择：Code -&gt; Preferencts -&gt; User Snippets 选项</li><li>或者在 VSCode Command 中输入：configure user snippets 即可</li></ul><p>如果是创建 snipperts 选择 选择 New Global Snippets file ，输入你要创面的 snipperts name 即可进入配置</p><p>snipperts 文件是 JSON 风格，刚创建后的默认格式内容如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/32629723/1670496421994-14f5c7d8-6aa8-4187-abbb-311f42e6eecc.png" alt="img"></p><ul><li>scope：限定代码段的作用域，例如 go 语言的代码段不会出现在 js 中，反之亦然</li><li>prefix：是快捷关键字，当 VSCode 检测到代码中出现 prefix 关键字就会在编辑器中替换为 body 的内容</li><li>body：是重复的代码模板内容，通常是程序员想要自动化的一些重复，模板代码，录入在这里</li><li>description：顾名思义就是对这段 snippets 的具体描述</li></ul><p>这里值得再提一下的就是， body 里面的 $1 关键字是模板代码替换后鼠标光标的所在位置，当出现多个 $1，$2 的时候，可以通过键盘 TAB 按键快速切换鼠标光标所在位置，用于提高效率，这块就不具体深入描述了。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>有兴趣深入研究的伙伴可以 VSCode Snippets 官方的相关的文档，里面解释的非常详细</p><p>官方链接：<a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets">https://code.visualstudio.com/docs/editor/userdefinedsnippets</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vscode安装、配置与使用</title>
    <link href="/2022/10/16/Vscode%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/10/16/Vscode%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="VSCode安装、配置与使用"><a href="#VSCode安装、配置与使用" class="headerlink" title="VSCode安装、配置与使用"></a>VSCode安装、配置与使用</h1><ul><li><p><strong>Vscode的 安装与基本配置</strong></p></li><li><ul><li>官方下载网址：<a href="https://code.visualstudio.com/download#">https://code.visualstudio.com/download#</a></li><li>注意路径设置、环境变量配置，安装教程：<a href="https://www.cnblogs.com/cat-eol/p/15303986.html">https://www.cnblogs.com/cateol/p/15303986.html</a></li><li>安装完成后，启动界面如下，可根据自己的需求进行修改</li></ul></li></ul><p><img src="/2022/10/16/Vscode%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/1.png" alt="1"></p><p>Vscode相关使用教程：<a href="https://geek-docs.com/vscode/vscode-tutorials/introduction-to-vscode.html">https://geek-docs.com/vscode/vscode-tutorials/introduction-to-vscode.html</a></p><ul><li><strong>扩展与插件</strong></li></ul><p>点击拓展即可搜索想安装的插件并进行下载，界面如下，这里已经装了部分插件</p><p><img src="/2022/10/16/Vscode%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/2.png" alt="2"></p><p><strong>相关插件介绍与使用：</strong></p><ul><li><ul><li>Chinese (Simplified) (简体中文) Language Pack for Visual Studio Code</li><li>Emmet：<a href="https://www.cnblogs.com/leeke98/p/11208878.html">https://www.cnblogs.com/leeke98/p/11208878.html</a></li><li>Better-Comments：<a href="https://www.cnblogs.com/suwanbin/p/13263732.html">https://www.cnblogs.com/suwanbin/p/13263732.html</a></li><li>Auto Rename Tag：<a href="https://cloud.tencent.com/developer/article/2111838">https://cloud.tencent.com/developer/article/2111838</a></li><li>Live-Server：<a href="https://www.cnblogs.com/xiaqiuchu/articles/13338716.html">https://www.cnblogs.com/xiaqiuchu/articles/13338716.html</a></li><li>Beautify：格式化html、css、js，vue里配置方法与快捷键：<a href="https://blog.csdn.net/jiandan1127/article/details/85958965">https://blog.csdn.net/jiandan1127/article/details/85958965</a></li><li>CSS Peek：用于快速查看元素上的CSS样式<a href="https://blog.csdn.net/fd2025/article/details/124462556">https://blog.csdn.net/fd2025/article/details/124462556</a></li><li>Markdown Preview Enhanced：<a href="https://www.cnblogs.com/shanzhiming/p/10668276.html">https://www.cnblogs.com/shanzhiming/p/10668276.html</a></li></ul></li></ul><p><strong>关于snippets的说明：</strong></p><p>snippets（代码块），在我们日常工作中存在大量重复代码编写，这时可以使用snippets直接调用已经封装好的模板代码，这样做能极大提高编程效率。</p><p><img src="/2022/10/16/Vscode%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/3.gif" alt="3"></p><p>另外，关于Vscode snippets的相关使用：<a href="https://www.jianshu.com/p/a60b320fb197">https://www.jianshu.com/p/a60b320fb197</a></p><p>​                   <a href="https://www.php.cn/tool/vscode/489259.html">https://www.php.cn/tool/vscode/489259.html</a></p><p><strong>一些今后可能会用到的snippets插件：</strong></p><ul><li><ul><li>JavaScript(ES6) code snippets：ES6语法智能提示，以及快速输入，不仅仅支持.js，还支持.ts，.jsx，.tsx，.html，.vue，省去了配置其支持各种包含js代码文件的时间。</li><li>Vue 3 Snippets：包含了所有的Vue.js 2和Vue.js 3的api对应的代码片段</li><li>Vue Vscode Snippets：<a href="https://www.its301.com/article/qq_41107231/117195087">https://www.its301.com/article/qq_41107231/117195087</a></li><li>Simple React Snippets：<a href="https://www.jianshu.com/p/c141b89e5808">https://www.jianshu.com/p/c141b89e5808</a></li></ul></li><li><p><strong>editorconfig 文件的配置和使用</strong></p></li><li><ul><li><strong>editorconfig文件是什么？</strong></li></ul></li></ul><p>不同的开发人员，不同的编辑器，有不同的编码风格，EditorConfig就是用来协同团队开发人员之间的代码的风格及样式规范化的一个工具，.editorconfig正是它的默认配置文件，编辑器可以读取配置文件并以此来格式化代码。</p><ul><li><ul><li><strong>Vscode如何使用editorconfig</strong></li></ul></li></ul><p>EditorConfig插件不是所有编辑器都默认支持，如Vscode需要自行下载，而webstrom默认支持，我们可以在扩展中下载EditorConfig for VS Code。</p><p><img src="/2022/10/16/Vscode%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/4.png" alt="4"></p><p>在当前项目的根目录下添加.editorconfig文件，如下。</p><p><img src="/2022/10/16/Vscode%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/5.png" alt="5"></p><p>可以根据个人需求编辑风格的具体界面。</p><p><img src="/2022/10/16/Vscode%E5%AE%89%E8%A3%85%E3%80%81%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/6.png" alt="6"></p><p><strong>editorconfig相关编码属性：</strong></p><ul><li>root：表示是最顶层的配置文件，发现为true时，才会停止查找.editorconfig文件</li><li>indent_style：设置缩进风格，可选值有制表符tab和空格space</li><li>indent_size：设置缩进空格数，一般为整数2或4</li><li>tab_width：设置tab类型的缩进列数，一般为整数2或4</li><li>charset：编码格式，可选值有latin1、utf-8（一般使用它）、utf-16be、utf-16le</li><li>insert_final_newline：保存文件时是否在文件的最后插入一个空行。可为true和false</li><li>trim_trailing_whitespace：是否删除行尾的空格，可为true和false</li><li>end_of_line设置换行符格式，可选值lf(一般为它)、cr、crlf</li></ul><p><strong>与editorconfig相似的代码整洁工具：</strong></p><ul><li>ESLint：<a href="https://juejin.cn/post/7012798266089668645">https://juejin.cn/post/7012798266089668645</a></li><li>Prettier：<a href="https://www.jianshu.com/p/18999f6e1668">https://www.jianshu.com/p/18999f6e1668</a></li></ul><p>全面梳理三者：<a href="https://juejin.cn/post/6952842182252298248">https://juejin.cn/post/6952842182252298248</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo的初级搭建以及部署到github page上</title>
    <link href="/2022/09/26/Hexo%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/"/>
    <url>/2022/09/26/Hexo%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><ol><li>安装Git，安装Node.js</li><li>安装Hexo</li><li>GitHub创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub</li><li>设置个人域名</li><li>发布文章</li></ol><h3 id="1-安装Git与Node-js"><a href="#1-安装Git与Node-js" class="headerlink" title="1. 安装Git与Node.js"></a>1. 安装Git与Node.js</h3><p>直接到官网下载</p><h3 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2. 安装hexo"></a>2. 安装hexo</h3><p>先创建一个文件夹，右键git bash打开</p><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>可以使用hexo -v查看版本</p><p>接下来初始化hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init anyname<br></code></pre></td></tr></table></figure><p>anyname可以取任何名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> myblog //进入这个myblog文件夹<br>$ npm install<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g<br>$ hexo server<br></code></pre></td></tr></table></figure><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到生成的博客了。</p><h3 id="3-GitHub创建个人仓库"><a href="#3-GitHub创建个人仓库" class="headerlink" title="3.GitHub创建个人仓库"></a>3.GitHub创建个人仓库</h3><p>首先注册一个GitHub账户，登录后在GitHub.com中看到一个New repository，新建仓库，用户名.github.io，这样将来要部署到GitHub page的时候，可以被识别</p><p>点击create repository。</p><h3 id="4-生成SSH添加到GitHub"><a href="#4-生成SSH添加到GitHub" class="headerlink" title="4.生成SSH添加到GitHub"></a>4.生成SSH添加到GitHub</h3><p>在git bash中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br>$ git config --global user.email <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>使用这两天命令检查你输入的是否正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config user.name<br>$ git config user.email<br></code></pre></td></tr></table></figure><p>创建SSH，根据提示操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key,把你的id_rsa.pub里面的信息复制进去。</p><p>回到git bush,输入指令检查是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -T git@github.com<br></code></pre></td></tr></table></figure><h3 id="5-将hexo部署到GitHub"><a href="#5-将hexo部署到GitHub" class="headerlink" title="5.将hexo部署到GitHub"></a>5.将hexo部署到GitHub</h3><p>打开站点配置文件 _config.yml，翻到最后，修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: https://github.com/YourgithubName/YourgithubName.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><p>YourgithubName就是你的GitHub账户</p><p>回到git bash，安装deploy-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure><p>hexo clean清除生成的东西<br>hexo generate 生成静态文章，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写</p><p>如果不出意外的话，可以在<a href="http://yourname.github.io/">http://yourname.github.io</a> 看到你的博客</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Web相关问题</title>
    <link href="/2022/09/25/web%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2022/09/25/web%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="Web相关问题"><a href="#Web相关问题" class="headerlink" title="Web相关问题"></a>Web相关问题</h2><h3 id="Q：什么是Web服务器？Web服务器软件有哪些？"><a href="#Q：什么是Web服务器？Web服务器软件有哪些？" class="headerlink" title="Q：什么是Web服务器？Web服务器软件有哪些？"></a>Q：什么是Web服务器？Web服务器软件有哪些？</h3><p><strong>A:</strong> Web服务器一般指的是“网站服务器”，是某种驻留在因特网上的计算机程序，可以向请求终端提供服务，主要功能时存储、处理和传递网页给“客户”，传递内容一般是HTML文档、图像、样式表或脚本等，也可以放置网站文件以供浏览或下载。</p><p>​ Web服务器也称为**WWW(Word Wide Web)**服务器，核心功能就是提供网页信息浏览服务，严格来说Web服务器只负责处理http协议请求，发送静态页面的内容。</p><p>​主流的web服务器主要是<strong>Apache、Nginx、IIS</strong>，还有较多使用的<strong>Tomcat、Jetty、WebSphere，WebLogic，Kerstrel</strong>等。</p><h3 id="Q：什么是Web浏览器？Web浏览器软件有哪些？"><a href="#Q：什么是Web浏览器？Web浏览器软件有哪些？" class="headerlink" title="Q：什么是Web浏览器？Web浏览器软件有哪些？"></a>Q：什么是Web浏览器？Web浏览器软件有哪些？</h3><p><strong>A：</strong>Web浏览器，即网页浏览器（英语：web browser），是一种用来检索、展示以及传递Web信息资源的应用程序。Web信息资源由统一资源标识符( Uniform Resource Identifier，URI)所标记，它是一张网页、一张图片、一段视频或者任何在Web上所呈现的内容。使用者可以借助超级链接( Hyperlinks)，通过浏览器浏览互相关联的信息。</p><p>​常用的Web浏览器软件有<strong>Edge、Firefox、Chorme</strong>等。</p><h3 id="Q：安装一个网站软件与安装一个桌面软件有什么不同？"><a href="#Q：安装一个网站软件与安装一个桌面软件有什么不同？" class="headerlink" title="Q：安装一个网站软件与安装一个桌面软件有什么不同？"></a>Q：安装一个网站软件与安装一个桌面软件有什么不同？</h3><p><strong>A：</strong>网站软件应该指的是web 应用程序，需要IE来执行；一般以网页形式存在；需要很多客户端来共享。</p><p>它有一定的优点，如：</p><ol><li>能够实现最大的资源共享</li><li>维护与部署起来成本低</li></ol><p>但也有相应的缺点：响应速度比桌面应用程序要低很多。    </p><p>​桌面软件应该指的是桌面应用程序。比如：记事本，Word,Excel等。</p><p>这种应用程序的特点是：</p><ol><li>缺少共享 </li><li>直接双击就可以运行，不需要IE  </li><li>一般以window的窗口形式存在</li></ol><h3 id="Q：安装和运行Wordpress必须依赖哪些软件？这些软件各自的职能是什么？"><a href="#Q：安装和运行Wordpress必须依赖哪些软件？这些软件各自的职能是什么？" class="headerlink" title="Q：安装和运行Wordpress必须依赖哪些软件？这些软件各自的职能是什么？"></a>Q：安装和运行Wordpress必须依赖哪些软件？这些软件各自的职能是什么？</h3><p><strong>A：</strong>安装和运行Wordpress必须依赖<strong>PHP、Mysql、Apache</strong>、域名等</p><p>这些软件（程序）的职能：</p><ol><li>PHP：Wordpress是使用PHP语言开发的博客平台，没有php环境，wordpress是跑不起来的。</li><li>Mysql：Mysql作为数据库功能强大，操作方便，用于存储网站数据很合适，一个WordPress网站需要使用服务器，并且现在大部分的服务器都支持MySQL作为数据库,并且根据服务内容,在某些情况下甚至可以无限制地使用MySQL。</li><li>Apache：Apache 是在 Web 服务器上运行的软件。第一步是让它在服务器和 Web 浏览器之间建立连接。这允许来自这些 Web 浏览器的用户向服务器发送请求，而 Apache 负责接受来自访问者的 HTTP 请求，并以网页的形式将请求的信息发回给他们，最终结果是访问者可以看到该网页上的内容</li><li>域名：提供访问网站的途径</li></ol><p>而对于新手来讲，一般都会选择诸如phpstudy、宝塔等部署面板，这类程序包集成了apache&#x2F;ngnix+php+mysql等。但更推荐自己手动一个个单独安装apache、php、mysql。</p><h3 id="Q：安装和运行hexo所生成的网站依赖哪些软件？"><a href="#Q：安装和运行hexo所生成的网站依赖哪些软件？" class="headerlink" title="Q：安装和运行hexo所生成的网站依赖哪些软件？"></a>Q：安装和运行hexo所生成的网站依赖哪些软件？</h3><p><strong>A：</strong>安装和运行hexo需要依赖<strong>Git、Node.js、Hexo、GitHub</strong>。</p><p>相关职能：</p><ol><li>Git：Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的Hexo博客文章，上传到GitHub的工具。</li><li>Node.js：Node.js是运行在服务端的 JavaScript，其实就是一种javascript的运行环境，能够使得javascript脱离浏览器运行。Hexo是基于 node.js 生成静态页面，所以需要安装一下node.Js和里面的npm工具，让Hexo成功运行。</li><li>Hexo：Hexo是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. Hexo支持GitHub Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统.</li><li>GitHub：GitHub提供一个免费域名托管。</li></ol><h3 id="Q：使用hexo生成一个网站，需要经历哪几个关键步骤？"><a href="#Q：使用hexo生成一个网站，需要经历哪几个关键步骤？" class="headerlink" title="Q：使用hexo生成一个网站，需要经历哪几个关键步骤？"></a>Q：使用hexo生成一个网站，需要经历哪几个关键步骤？</h3><p><strong>A：</strong>使用hexo生成一个网站并部署到GitHub上，需要经历如下几个关键步骤：</p><ol><li>安装Git、Node.js、Hexo</li><li>初始化博客目录、添加内容、完成静态网页部署</li><li>GitHub上创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub上</li><li>设置个人域名</li></ol><h3 id="Q：使用wordpress构建的博客网站与使用hexo构建的博客网站有什么不同？"><a href="#Q：使用wordpress构建的博客网站与使用hexo构建的博客网站有什么不同？" class="headerlink" title="Q：使用wordpress构建的博客网站与使用hexo构建的博客网站有什么不同？"></a>Q：使用wordpress构建的博客网站与使用hexo构建的博客网站有什么不同？</h3><p><strong>A：</strong>wordpress相关优点：</p><ol><li>系统本身开源 &amp; 免费</li><li>基于PHP构建，支持多种数据库 | 常见的LNMP系统，便于部署</li><li>丰富的参考资料以及社群系统 | 庞大的用户基数注定了这一特点</li><li>丰富且方便的主题以及插件系统，满足各种自定义需求，且都可以通过网站后台进行上传以及控制</li><li>SEO友好 | 可以有效提高网站在搜索引擎的排名</li><li>自带富文本编辑器，新版增加网页编辑器，可以很有效的编辑出自己喜欢的页面出来</li></ol><p>缺点：</p><ol><li>很多做的很好的主题是收费的</li><li>插件数量需要控制，会影响到网站运行速度和用户体验</li><li>动态页面静态化较差，只能实现首页和文章页的静态化，通常需要对整站做伪静态化</li><li>丰富的自定义系统决定了需要花费在网站自定义搭建的时间会更多</li><li>安全程度不高，已有针对性的扫描工具，需要在安全上花费更多时间</li></ol><p>Hexo相关优点：</p><ol><li>纯静态，SEO特性好</li><li>可以部署在GitHub之类的托管平台 | 真正实现0成本建站</li><li>主题丰富、功能完全</li><li>博客系统本身访问快速 | 因为没有后端</li></ol><p>缺点：</p><ol><li>没有后端，这是一把双刃剑，带来的优点是可以在GitHub平台托管，访问快速，但是也会导致没有后端进行写作、配置等操作</li><li>环境配置、操作方式繁杂，因为没有后端系统，所以Hexo自身是依托于自己在本地配置好的环境，写好文章以后可以开启Server进行预览，没有问题以后通过git推送到仓库，但是也有一个很重要的问题就是想在多个电脑上写博文的话就需要在每个环境配制好一模一样的环境（通过git还是比较容易实现的），否则一次推送之后之前写的博客就都没有了</li><li>评论系统需要依托于第三方平台</li><li>主题等内容的修改需要手动配置yaml文件，可拓展性极佳，但是操作未免太过于硬核</li></ol><p>在两者建站之后的体验过程中，给我最大的不同是：</p><p>​WordPress拥有完整的后台管理系统及数据库，是真正的动态网站，但一般需要支付网站域名和主机空间费用。</p><p>​而Hexo程序虽然是免费开源，更多的体验是静态方面，但相对于WordPress在域名上可以借助Github Page服务，轻松建立网站。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/25/hello-world/"/>
    <url>/2022/09/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
