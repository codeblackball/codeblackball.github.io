<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo的初级搭建以及部署到github page上</title>
    <link href="/2022/09/26/Hexo%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/"/>
    <url>/2022/09/26/Hexo%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo搭建步骤"><a href="#Hexo搭建步骤" class="headerlink" title="Hexo搭建步骤"></a>Hexo搭建步骤</h2><ol><li>安装Git，安装Node.js</li><li>安装Hexo</li><li>GitHub创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub</li><li>设置个人域名</li><li>发布文章</li></ol><h3 id="1-安装Git与Node-js"><a href="#1-安装Git与Node-js" class="headerlink" title="1. 安装Git与Node.js"></a>1. 安装Git与Node.js</h3><p>直接到官网下载</p><h3 id="2-安装hexo"><a href="#2-安装hexo" class="headerlink" title="2. 安装hexo"></a>2. 安装hexo</h3><p>先创建一个文件夹，右键git bash打开</p><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>可以使用hexo -v查看版本</p><p>接下来初始化hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init anyname<br></code></pre></td></tr></table></figure><p>anyname可以取任何名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> myblog //进入这个myblog文件夹<br>$ npm install<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo g<br>$ hexo server<br></code></pre></td></tr></table></figure><p>打开hexo的服务，在浏览器输入localhost:4000就可以看到生成的博客了。</p><h3 id="3-GitHub创建个人仓库"><a href="#3-GitHub创建个人仓库" class="headerlink" title="3.GitHub创建个人仓库"></a>3.GitHub创建个人仓库</h3><p>首先注册一个GitHub账户，登录后在GitHub.com中看到一个New repository，新建仓库，用户名.github.io，这样将来要部署到GitHub page的时候，可以被识别</p><p>点击create repository。</p><h3 id="4-生成SSH添加到GitHub"><a href="#4-生成SSH添加到GitHub" class="headerlink" title="4.生成SSH添加到GitHub"></a>4.生成SSH添加到GitHub</h3><p>在git bash中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br>$ git config --global user.email <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>使用这两天命令检查你输入的是否正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config user.name<br>$ git config user.email<br></code></pre></td></tr></table></figure><p>创建SSH，根据提示操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key,把你的id_rsa.pub里面的信息复制进去。</p><p>回到git bush,输入指令检查是否成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ssh -T git@github.com<br></code></pre></td></tr></table></figure><h3 id="5-将hexo部署到GitHub"><a href="#5-将hexo部署到GitHub" class="headerlink" title="5.将hexo部署到GitHub"></a>5.将hexo部署到GitHub</h3><p>打开站点配置文件 _config.yml，翻到最后，修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: https://github.com/YourgithubName/YourgithubName.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure><p>YourgithubName就是你的GitHub账户</p><p>回到git bash，安装deploy-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure><p>hexo clean清除生成的东西<br>hexo generate 生成静态文章，可以用 hexo g缩写<br>hexo deploy 部署文章，可以用hexo d缩写</p><p>如果不出意外的话，可以在<a href="http://yourname.github.io/">http://yourname.github.io</a> 看到你的博客</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Web相关问题</title>
    <link href="/2022/09/25/%E6%88%91%E6%98%AF%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0a/"/>
    <url>/2022/09/25/%E6%88%91%E6%98%AF%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0a/</url>
    
    <content type="html"><![CDATA[<h2 id="Web相关问题"><a href="#Web相关问题" class="headerlink" title="Web相关问题"></a>Web相关问题</h2><h4 id="Q：什么是Web服务器？Web服务器软件有哪些？"><a href="#Q：什么是Web服务器？Web服务器软件有哪些？" class="headerlink" title="Q：什么是Web服务器？Web服务器软件有哪些？"></a>Q：什么是Web服务器？Web服务器软件有哪些？</h4><p><strong>A:</strong> Web服务器一般指的是“网站服务器”，是某种驻留在因特网上的计算机程序，可以向请求终端提供服务，主要功能时存储、处理和传递网页给“客户”，传递内容一般是HTML文档、图像、样式表或脚本等，也可以放置网站文件以供浏览或下载。</p><p>​ Web服务器也称为**WWW(Word Wide Web)**服务器，核心功能就是提供网页信息浏览服务，严格来说Web服务器只负责处理http协议请求，发送静态页面的内容。</p><p>​主流的web服务器主要是<strong>Apache、Nginx、IIS</strong>，还有较多使用的<strong>Tomcat、Jetty、WebSphere，WebLogic，Kerstrel</strong>等。</p><h4 id="Q：什么是Web浏览器？Web浏览器软件有哪些？"><a href="#Q：什么是Web浏览器？Web浏览器软件有哪些？" class="headerlink" title="Q：什么是Web浏览器？Web浏览器软件有哪些？"></a>Q：什么是Web浏览器？Web浏览器软件有哪些？</h4><p><strong>A：</strong>Web浏览器，即网页浏览器（英语：web browser），是一种用来检索、展示以及传递Web信息资源的应用程序。Web信息资源由统一资源标识符( Uniform Resource Identifier，URI)所标记，它是一张网页、一张图片、一段视频或者任何在Web上所呈现的内容。使用者可以借助超级链接( Hyperlinks)，通过浏览器浏览互相关联的信息。</p><p>​常用的Web浏览器软件有<strong>Edge、Firefox、Chorme</strong>等。</p><h4 id="Q：安装一个网站软件与安装一个桌面软件有什么不同？"><a href="#Q：安装一个网站软件与安装一个桌面软件有什么不同？" class="headerlink" title="Q：安装一个网站软件与安装一个桌面软件有什么不同？"></a>Q：安装一个网站软件与安装一个桌面软件有什么不同？</h4><p><strong>A：</strong>网站软件应该指的是web 应用程序，需要IE来执行；一般以网页形式存在；需要很多客户端来共享。</p><p>它有一定的优点，如：</p><ol><li>能够实现最大的资源共享</li><li>维护与部署起来成本低</li></ol><p>但也有相应的缺点：响应速度比桌面应用程序要低很多。    </p><p>​桌面软件应该指的是桌面应用程序。比如：记事本，Word,Excel等。</p><p>这种应用程序的特点是：</p><ol><li>缺少共享 </li><li>直接双击就可以运行，不需要IE  </li><li>一般以window的窗口形式存在</li></ol><h4 id="Q：安装和运行Wordpress必须依赖哪些软件？这些软件各自的职能是什么？"><a href="#Q：安装和运行Wordpress必须依赖哪些软件？这些软件各自的职能是什么？" class="headerlink" title="Q：安装和运行Wordpress必须依赖哪些软件？这些软件各自的职能是什么？"></a>Q：安装和运行Wordpress必须依赖哪些软件？这些软件各自的职能是什么？</h4><p><strong>A：</strong>安装和运行Wordpress必须依赖<strong>PHP、Mysql、Apache</strong>等</p><p>这些软件（程序）的职能：</p><ol><li>PHP：Wordpress是使用PHP语言开发的博客平台，没有php环境，wordpress是跑不起来的。</li><li>Mysql：Mysql作为数据库功能强大，操作方便，用于存储网站数据很合适，一个WordPress网站需要使用服务器，并且现在大部分的服务器都支持MySQL作为数据库,并且根据服务内容,在某些情况下甚至可以无限制地使用MySQL。</li><li>Apache：Apache 是在 Web 服务器上运行的软件。第一步是让它在服务器和 Web 浏览器之间建立连接。这允许来自这些 Web 浏览器的用户向服务器发送请求，而 Apache 负责接受来自访问者的 HTTP 请求，并以网页的形式将请求的信息发回给他们，最终结果是访问者可以看到该网页上的内容</li></ol><h4 id="Q：运行hexo所生成的网站依赖哪些软件？"><a href="#Q：运行hexo所生成的网站依赖哪些软件？" class="headerlink" title="Q：运行hexo所生成的网站依赖哪些软件？"></a>Q：运行hexo所生成的网站依赖哪些软件？</h4><p><strong>A：</strong>运行hexo需要依赖<strong>Git、Node.js、Hexo</strong>。</p><p>相关职能：</p><ol><li>Git：Git是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的Hexo博客文章，上传到GitHub的工具。</li><li>Node.js：Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具，让Hexo成功运行。</li><li>Hexo：Hexo是一个快速, 简洁且高效的博客框架. 让上百个页面在几秒内瞬间完成渲染. Hexo支持GitHub Flavored Markdown的所有功能, 甚至可以整合Octopress的大多数插件. 并自己也拥有强大的插件系统.</li></ol><h4 id="Q：使用hexo生成一个网站，需要经历哪几个关键步骤？"><a href="#Q：使用hexo生成一个网站，需要经历哪几个关键步骤？" class="headerlink" title="Q：使用hexo生成一个网站，需要经历哪几个关键步骤？"></a>Q：使用hexo生成一个网站，需要经历哪几个关键步骤？</h4><p><strong>A：</strong>使用hexo生成一个网站并部署到GitHub上，需要经历如下几个关键步骤：</p><ol><li>安装Git、Node.js、Hexo</li><li>GitHub上创建个人仓库</li><li>生成SSH添加到GitHub</li><li>将hexo部署到GitHub上</li><li>设置个人域名</li></ol><h4 id="Q：使用wordpress构建的博客网站与使用hexo构建的博客网站有什么不同？"><a href="#Q：使用wordpress构建的博客网站与使用hexo构建的博客网站有什么不同？" class="headerlink" title="Q：使用wordpress构建的博客网站与使用hexo构建的博客网站有什么不同？"></a>Q：使用wordpress构建的博客网站与使用hexo构建的博客网站有什么不同？</h4><p><strong>A：</strong>wordpress相关优点：</p><ol><li>系统本身开源 &amp; 免费</li><li>基于PHP构建，支持多种数据库 | 常见的LNMP系统，便于部署</li><li>丰富的参考资料以及社群系统 | 庞大的用户基数注定了这一特点</li><li>丰富且方便的主题以及插件系统，满足各种自定义需求，且都可以通过网站后台进行上传以及控制</li><li>SEO友好 | 可以有效提高网站在搜索引擎的排名</li><li>自带富文本编辑器，新版增加网页编辑器，可以很有效的编辑出自己喜欢的页面出来</li></ol><p>缺点：</p><ol><li>很多做的很好的主题是收费的</li><li>插件数量需要控制，会影响到网站运行速度和用户体验</li><li>动态页面静态化较差，只能实现首页和文章页的静态化，通常需要对整站做伪静态化</li><li>丰富的自定义系统决定了需要花费在网站自定义搭建的时间会更多</li><li>安全程度不高，已有针对性的扫描工具，需要在安全上花费更多时间</li></ol><p>Hexo相关优点：</p><ol><li>纯静态，SEO特性好</li><li>可以部署在GitHub之类的托管平台 | 真正实现0成本建站</li><li>主题丰富、功能完全</li><li>博客系统本身访问快速 | 因为没有后端</li></ol><p>缺点：</p><ol><li>没有后端，这是一把双刃剑，带来的优点是可以在GitHub平台托管，访问快速，但是也会导致没有后端进行写作、配置等操作</li><li>环境配置、操作方式繁杂，因为没有后端系统，所以Hexo自身是依托于自己在本地配置好的环境，写好文章以后可以开启Server进行预览，没有问题以后通过git推送到仓库，但是也有一个很重要的问题就是想在多个电脑上写博文的话就需要在每个环境配制好一模一样的环境（通过git还是比较容易实现的），否则一次推送之后之前写的博客就都没有了</li><li>评论系统需要依托于第三方平台</li><li>主题等内容的修改需要手动配置yaml文件，可拓展性极佳，但是操作未免太过于硬核</li></ol><p>在两者建站之后的体验过程中，给我最大的不同是：</p><p>​WordPress拥有完整的后台管理系统及数据库，是真正的动态网站，但一般需要支付网站域名和主机空间费用。</p><p>​而Hexo程序虽然是免费开源，更多的体验是静态方面，但相对于WordPress在域名上可以借助Github Page服务，轻松建立网站。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/25/hello-world/"/>
    <url>/2022/09/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
